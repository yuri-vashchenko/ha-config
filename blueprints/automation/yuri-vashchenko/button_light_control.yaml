blueprint:
  name: Control Yeelight 650 with Xiaomi Button
  source_url: https://gist.github.com/yuri-vashchenko/bddb24fbafdac3ab5e4dece17a5ce2b5
  description:
    "Control Yeelight 650 celing light with Xiaomi button:\n  - Single\
    \ press: If the night light or main light is on, turns if off, otherwise turns\
    \ on last active mode (night light or main light)\n  - Double press: Toggles main/night\
    \ light; If night light is on, switches it to main light and vice versa.\n  -\
    \ Long press: User action. In my case it triggers LED strip on/off.\n\nRequired\
    \ inputs:\n  - Trigger Entity (Button)\n  - Mainlight entity (Yeelight 650 Main\
    \ light entity)\n  - Nightlight entity (Yeelignt 650 Nightlight entity)\n  - Mode\
    \ entity (Yeelight 650 Nightlight binary sensor\n\nOptional inputs:\n  - Action\
    \ on long press (default is 'none' - do nothing)\n  - Ambilight Entity (Yeelight\
    \ 650 Ambilight entity, will turn on/off at the same time with main/night light)\n\
    \  - Enabling Entity (the automation will execute only when enabling_entity is\
    \ in Enabling Entity State)\n  - Enabling Entity State (see Enabling Entity above)\n"
  domain: automation
  input:
    trigger_entity:
      name: Trigger Entity
      description:
        When trigger entity enters trigger entity state (see below) it
        will trigger light change
      selector:
        entity: {}
    mainlight_entity:
      name: mainlight_entity
      description: Target Entity (Yeelight 650 Main light entity)
      selector:
        entity:
          filter:
            domain: light
    nightlight_entity:
      name: nightlight_entity
      description: Nightlight Entity (Yeelight 650 Night light entity)
      selector:
        entity:
          filter:
            domain: light
    mode_entity:
      name: mode_entity
      description: Mode Entity (Yeelight 650 Nightlight binary sensor)
      selector:
        entity:
          filter:
            domain: binary_sensor
    ambilight_entity:
      name: (Optional) Ambilight entity
      description:
        Ambilight entity will be turened on/off with main or nighlight
        entity
      default: []
      selector:
        entity:
          filter:
            domain: light
    hold_action:
      name: (Optional) Action to execute on holding button
      description:
        This optional action will execute on long button press (see trigger_entity
        and trigger_entity_state3)
      default: []
      selector:
        action: {}
    enabling_entity:
      name: (Optional) Enabling entity
      description:
        If this entity's state is set to enable entity state (see below)
        automation will trigger. This may be used to make automation triggering based
        on other entity state
      default:
      selector:
        entity: {}
    enabling_entity_state:
      name: (Optional) Enabling entity state
      description: If enabling entity is in this state the automation will trigger
      default: "on"
      selector:
        entity:
          filter:
            domain: input_text
variables:
  trigger_entity: !input "trigger_entity"
  trigger_entity_state_value: "{{ states[trigger_entity].state }}"
  mainlight_entity: !input "mainlight_entity"
  nightlight_entity: !input "nightlight_entity"
  ambilight_entity: !input "ambilight_entity"
  mode_entity: !input "mode_entity"
  toggle_entity: >
    {% if states[mode_entity].state == 'off' %}
      {{mainlight_entity}}
    {% else %}
      {{nightlight_entity}}
    {% endif %}
  toggle_action: >
    {% if states[toggle_entity].state == 'off' %}
      light.turn_on
    {% else %}
      light.turn_off
    {% endif %}
  light_mode: >
    {% if states[mode_entity].state == 'off' %}
      moonlight
    {% else %}
      normal
    {% endif %}
  change_mode_entity: >
    {% if states[mode_entity].state == 'on' %}
      {{ mainlight_entity}}
    {% else %}
      {{ nightlight_entity }}
    {% endif %}
  ambilight_action: >
    {% if states[mainlight_entity].state == 'off' and states[nightlight_entity].state == 'off' %}
      light.turn_on
    {% else %}
      light.turn_off
    {% endif %}
  hold_action: !input "hold_action"
  enabling_entity: !input "enabling_entity"
  enabling_entity_state: !input "enabling_entity_state"
trigger:
  - trigger: state
    entity_id: !input "trigger_entity"
    to:
      - single
      - double
      - hold
condition: >
  {{ enabling_entity == none or is_state(enabling_entity, enabling_entity_state) }}
action:
  - choose:
      - conditions: >
          {{ trigger.to_state.state == 'single' }}
        sequence:
          - alias: "log single click event"
            action: logbook.log
            data_template:
              name: "Button single click"
              message: >
                Processing button {{ trigger.entity_id }} single click.
                toggle_entity: {{ toggle_entity }},
                toggle_action: {{ toggle_action }},
                ambilight_action: {{ ambilight_action }}
              entity_id: "{{ toggle_entity }}"
              domain: light
          - alias: "toggle ambilight"
            action: "{{ ambilight_action }}"
            target:
              entity_id: "{{ ambilight_entity }}"
          - alias: "toogle light"
            action: "{{ toggle_action }}"
            target:
              entity_id: "{{ toggle_entity }}"
      - conditions: >
          {{ trigger.to_state.state == 'double' }}
        sequence:
          - alias: "log double click event"
            action: logbook.log
            data_template:
              name: "Button double click"
              message: >
                Processing button {{ trigger.entity_id }} double click.
                mainlight_entity: {{ mainlight_entity }},
                ambilight_action: {{ ambilight_entity }}
              entity_id: "{{ toggle_entity }}"
              domain: light
          - alias: "set mode main/nightlight"
            action: yeelight.set_mode
            target:
              entity_id: "{{ mainlight_entity }}"
            data_template:
              mode: "{{ light_mode }}"
          - alias: "turn on ambilight"
            action: light.turn_on
            target:
              entity_id: "{{ ambilight_entity }}"
      - conditions:
          - "{{ hold_action != '' }}"
          - "{{ trigger.to_state.state == 'hold' }}"
        sequence: !input "hold_action"
    default: []
mode: restart
