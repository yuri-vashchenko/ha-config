# Notification/Warning/Alarm
mqtt:
  - button:
      - name: "Cancel all"
        unique_id: cancel_all
        command_topic: "home/system/cancel_all"
  - number:
      - name: alarms
        command_topic: home/system/alarm/count
        min: 0
        max: 100
        step: 1
        retain: true
      - name: warnings
        command_topic: home/system/warning/count
        min: 0
        max: 100
        step: 1
        retain: true
      - name: notifications
        command_topic: home/system/notification/count
        min: 0
        max: 100
        step: 1
        retain: true

template:
  - binary_sensor:
      - name: alarm
        state: "{{ (states('number.alarms') | int(0)) > 0 }}"
        device_class: problem
      - name: warning
        state: "{{ (states('number.warnings') | int(0)) > 0 }}"
        device_class: problem
      - name: notification
        state: "{{ (states('number.notifications') | int(0)) > 0 }}"
        device_class: problem
      - name: event
        state: >
          {{ is_state('binary_sensor.notification', 'on') or
            is_state('binary_sensor.warning', 'on') or
            is_state('binary_sensor.alarm', 'on') }}
        device_class: problem

  - sensor:
      - name: smoke_detected
        state: >
          {% set ns = namespace(alarms = []) %}
          {% for entity in states.binary_sensor
                if is_state_attr(entity.entity_id, 'device_class', 'smoke') and
                  is_state(entity.entity_id, 'on') %}
                  {% set ns.alarms = ns.alarms + [entity.name] %}
          {% endfor %}
          {{ ns.alarms | length }}
        attributes:
          list_entities: >
            {% set ns = namespace(alarms = []) %}
            {% for entity in states.binary_sensor
                if is_state_attr(entity.entity_id, 'device_class', 'smoke') and
                  is_state(entity.entity_id, 'on') %}
                  {% set ns.alarms = ns.alarms + [entity.name] %}
            {% endfor %}
            {{ ns.alarms }}

      - name: water_leak_detected
        state: >
          {% set ns = namespace(alarms = []) %}
          {% for entity in states.binary_sensor
                if is_state_attr(entity.entity_id, 'device_class', 'smoke') and
                  is_state(entity.entity_id, 'on') %}
                  {% set ns.alarms = ns.alarms + [entity.name] %}
          {% endfor %}
          {{ ns.alarms | length }}
        attributes:
          list_entities: >
            {% set ns = namespace(alarms = []) %}
            {% for entity in states.binary_sensor
                if is_state_attr(entity.entity_id, 'device_class', 'smoke') and
                  is_state(entity.entity_id, 'on') %}
                  {% set ns.alarms = ns.alarms + [entity.name] %}
            {% endfor %}
            {{ ns.leak_alarms }}

script:
  trigger_event:
    alias: "Trigger alarm, warning or notification"
    sequence:
      - alias: "main control"
        condition: state
        entity_id: binary_sensor.main_control
        state: "on"
      - alias: "Iterate over notifications, warnings and errors"
        repeat:
          for_each:
            - set_notification
            - set_warning
            - set_alarm
          sequence:
            - alias: "Generate list of scripts"
              variables:
                scripts: >
                  {% set ns = namespace(scripts = []) %}
                  {% for s in states.script %}
                    {% if repeat.item in s.object_id %}
                      {% set ns.scripts = ns.scripts + [s.object_id] %}
                    {% endif %}
                  {% endfor %}
                  {{ ns.scripts }}
            - alias: "Run all scritps"
              repeat:
                for_each: "{{ scripts }}"
                sequence:
                  - service: script.turn_on
                    target:
                      entity_id: "script.{{ repeat.item }}"

  cancel_all:
    sequence:
      - alias: "Cancel all"
        repeat:
          for_each:
            - number.alarms
            - number.warnings
            - number.notifications
          sequence:
            - alias: "turn off everything"
              service: number.set_value
              target:
                entity_id: "{{ repeat.item }}"
              data:
                value: 0
    mode: queued
    max: 100

automation:
  - id: trigger alarm when smoke or water leak detected
    alias: Включить тревогу при срабатывании датчика дыма или датчика протечки
    trigger:
      - platform: state
        entity_id: sensor.smoke_detected
        id: smoke
      - platform: state
        entity_id: sensor.water_leak_detected
        id: water_leak
    condition:
      - alias: "Main control is on"
        condition: state
        entity_id: binary_sensor.main_control
        state: "on"
    action:
      - alias: "Обновить счётчик тревог"
        service: number.set_value
        target:
          entity_id: number.alarms
        data:
          value: >
            {{ states('sensor.smoke_detected') | int(0) + states('sensor.water_leak_detected') | int(0) }}
    mode: restart

  - id: trigger event
    alias: Запустить или выключить режим тревоги, предупреждения или нотификации
    trigger:
      - platform: state
        entity_id: number.notifications
      - platform: state
        entity_id: number.warnings
      - platform: state
        entity_id: number.alarms
    condition:
      - alias: "Main control is on"
        condition: state
        entity_id: binary_sensor.main_control
        state: "on"
    action:
      - alias: "Запустить скрипт для генерации или отключения события"
        service: script.trigger_event
    mode: queued

  - id: cancel_all_on_button_press
    alias: cancell all on button press
    trigger:
      platform: mqtt
      topic: home/system/cancel_all
      payload: PRESS
    condition:
      - alias: "control mode"
        condition: state
        entity_id: binary_sensor.main_control
        state: "on"
    action:
      alias: "Cancell all alarms, notifications and warnings"
      service: script.cancel_all
