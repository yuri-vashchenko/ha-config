# Utility meter
# https://www.home-assistant.io/integrations/utility_meter

utility_meter:
  daily_energy:
    source: sensor.house_total_energy
    name: Daily Energy
    cycle: daily
    tariffs:
      - h1_day
      - h1_night
      - h2_day
      - h2_night
  monthly_energy:
    source: sensor.house_total_energy
    name: Monthly Energy
    cycle: monthly
    tariffs:
      - h1_day
      - h1_night
      - h2_day
      - h2_night

automation:
  - alias: Set utility meter tariff
    trigger:
      - platform: homeassistant
        event: start
      - platform: time
        at: "07:00:00"
      - platform: time
        at: "23:00:00"
    action:
      choose:
        - alias: energy_tariff_set_h1_night
          conditions: "{{ now().month < 7 and (now().hour < 7 or now().hour >= 23 ) }}"
          sequence:
            - service: select.select_option
              target:
                entity_id: select.daily_energy
              data:
                option: h1_night
            - service: select.select_option
              target:
                entity_id: select.monthly_energy
              data:
                option: h1_night
        - alias: energy_tariff_set_h1_day
          conditions: "{{ now().month < 7 and (now().hour >= 7 and now().hour < 23 ) }}"
          sequence:
            - service: select.select_option
              target:
                entity_id: select.daily_energy
              data:
                option: h1_day
            - service: select.select_option
              target:
                entity_id: select.monthly_energy
              data:
                option: h1_day
        - alias: energy_tariff_set_h2_night
          conditions: "{{ now().month >= 7 and (now().hour < 7 or now().hour >= 23 ) }}"
          sequence:
            - service: select.select_option
              target:
                entity_id: select.daily_energy
              data:
                option: h2_night
            - service: select.select_option
              target:
                entity_id: select.monthly_energy
              data:
                option: h2_night
        - alias: energy_tariff_set_h2_day
          conditions: "{{ now().month >= 7 and (now().hour >= 7 and now().hour < 23 ) }}"
          sequence:
            - service: select.select_option
              target:
                entity_id: select.daily_energy
              data:
                option: h2_day
            - service: select.select_option
              target:
                entity_id: select.monthly_energy
              data:
                option: h2_day

# Rub per KW/H
# I полугодие / II полугодие
# Day 3,66 / 3,80
# Night 1,37 / 1,44

sensor:
  - platform: template
    sensors:
      current_energy_cost:
        friendly_name: "cost of kWh for current tariff"
        unit_of_measurement: "RUB/kWh"
        value_template: |
          {% if is_state("utility_meter.daily_energy", "h1_day") -%}
            3.66
          {% elif is_state("utility_meter.daily_energy", "h2_day") -%}
            3.80
          {% elif is_state("utility_meter.daily_energy", "h1_night") -%}
            1.37
          {% elif is_state("utility_meter.daily_energy", "h2_night") -%}
            1.44
          {%- endif %}
      daily_energy_total_cost_single_tariff:
        friendly_name: "одноставочный тариф"
        unit_of_measurement: "RUB"
        value_template: |
          {% set d_h1_day = states("sensor.daily_energy_h1_day") | float %}
          {% set d_h1_night = states("sensor.daily_energy_h1_night") | float %}
          {% set d_h2_day = states("sensor.daily_energy_h2_day") | float %}
          {% set d_h2_night = states("sensor.daily_energy_h2_night") | float %}
          {{ ((d_h1_day + d_h1_night) * 3.18 + (d_h2_day + d_h2_night) * 3.30) | round(2) }}
      monthly_energy_total_cost_single_tariff:
        friendly_name: "одноставочный тариф"
        unit_of_measurement: "RUB"
        value_template: |
          {% set m_h1_day = states("sensor.monthly_energy_h1_day") | float %}
          {% set m_h1_night = states("sensor.monthly_energy_h1_night") | float %}
          {% set m_h2_day = states("sensor.monthly_energy_h2_day") | float %}
          {% set m_h2_night = states("sensor.monthly_energy_h2_night") | float %}
          {{ ((m_h1_day + m_h1_night) * 3.18 + (m_h2_day + m_h2_night) * 3.30) | round(2) }}
      daily_energy_total_cost_double_tariff:
        friendly_name: "cost of daily consumed power if single tariff would apply"
        unit_of_measurement: "RUB"
        value_template: |
          {% set d_h1_day = states("sensor.daily_energy_h1_day") | float %}
          {% set d_h1_night = states("sensor.daily_energy_h1_night") | float %}
          {% set d_h2_day = states("sensor.daily_energy_h2_day") | float %}
          {% set d_h2_night = states("sensor.daily_energy_h2_night") | float %}
          {{ (d_h1_day * 3.66 + d_h1_night * 1.37 + d_h2_day * 3.80 + d_h2_night * 1.44) | round(2) }}
      monthly_energy_total_cost_double_tariff:
        friendly_name: "одноставочный тариф"
        unit_of_measurement: "RUB"
        value_template: |
          {% set m_h1_day = states("sensor.monthly_energy_h1_day") | float %}
          {% set m_h1_night = states("sensor.monthly_energy_h1_night") | float %}
          {% set m_h2_day = states("sensor.monthly_energy_h2_day") | float %}
          {% set m_h2_night = states("sensor.monthly_energy_h2_night") | float %}
          {{ (m_h1_day * 3.66 + m_h1_night * 1.37 + m_h2_day * 3.80 + m_h2_night * 1.44) | round(2) }}
