# Ленина комната

homeassistant:
  customize:
    # Розетка кондиционера
    switch.elena_plug_ac_power_outage_memory:
      friendly_name: Розетка кондиционера память отключения

    # Розетка телевизора 65
    switch.elena_plug_tv_power_outage_memory:
      friendly_name: Розетка телевизора 65 память отключения

      # Телевизор
    media_player.tv:
      friendly_name: TV
      device_class: tv

    media_player.yandex_station_u00yg86004sfjk:
      friendly_name: yandex_station_elena

  customize_glob:
    # Кнопки
    "*158d0003d13dca*":
      friendly_name: Лена кнопка
    "*elena_button_elena*":
      friendly_name: Лена кнопка

    "*158d00035846ec*":
      friendly_name: Юра кнопка
    "*button_yuri*":
      friendly_name: Юра кнопка

    "*158d000709b340*":
      friendly_name: Юра куб

    # Розетка кондиционера
    "*158d00032d3a92*":
      friendly_name: Розетка кондиционера
    "*elena_plug_ac*":
      friendly_name: Розетка кондиционера

    # Розетка телевизора
    "*158d0003c77e0c*":
      friendly_name: Розетка телевизора 65
    "*elena_plug_tv*":
      friendly_name: Розетка телевизора 65

    # Датчики
    "*158d000460dde9*":
      friendly_name: Дверь на балкон
    "*door_balcony*":
      friendly_name: Дверь на балкон
      device_class: door

    "*158d000483f52f*":
      friendly_name: Лена дверь
    "*door_elena*":
      friendly_name: Лена дверь
      device_class: door

    "*158d000464d3fc*":
      friendly_name: Лена движение
    "*elena_motion*":
      friendly_name: Лена движение

template:
  - binary_sensor:
      - name: elena_ac_power
        state: >
          {%- if states('sensor.elena_plug_ac_power') not in ['unknown', 'unavailable'] -%}
            {{ states('sensor.elena_plug_ac_power') | float > 50.0 }}
          {%- else -%}
            false
          {%- endif -%}
        device_class: plug
      - name: host_occupancy
        state: >
          {{ states('person.yuri_vashchenko') in ['home', 'Дом'] or
            states('person.elena_vashchenko') in ['home', 'Дом'] }}

  - sensor:
      - name: elena_total_power
        state: >
          {% set ns = namespace(states=[]) -%}
          {% for plug in expand('group.elena_plug') | selectattr('domain','eq','switch') | map(attribute='entity_id') -%}
            {% set energy_sensor_name = plug | replace("switch", "sensor") + "_power" -%}
            {% if is_number(states(energy_sensor_name)) -%}
            {% set plug_energy = states(energy_sensor_name) | float -%}
            {% set ns.states = ns.states + [plug_energy] -%}
            {% endif -%}
          {% endfor -%}
          {{ ns.states | sum | round(2) }}
        state_class: measurement
        unit_of_measurement: "W"
        device_class: power

      - name: elena_total_energy
        state: >
          {% set ns = namespace(states=[]) -%}
          {% for plug in expand('group.elena_plug') | selectattr('domain','eq','switch') | map(attribute='entity_id') -%}
            {% set energy_sensor_name = plug | replace("switch", "sensor") + "_energy" -%}
            {% if is_number(states(energy_sensor_name)) -%}
            {% set plug_energy = states(energy_sensor_name) | float -%}
            {% set ns.states = ns.states + [plug_energy] -%}
            {% endif -%}
          {% endfor -%}
          {{ ns.states | sum | round(2) }}
        state_class: total_increasing
        unit_of_measurement: "kWh"
        device_class: energy

      - name: users_in_elena_room
        state: >
          {{ states.input_text | selectattr('entity_id','contains','room') | selectattr('state','eq','elena') | list | count }}
        attributes:
          users: >
            {{ states.input_text | selectattr('entity_id','contains','room') | selectattr('state','eq','elena') | map(attribute='name') | list }}

script:
  led_strip_toggle:
    alias: led_strip_toggle
    sequence:
      - service: remote.send_command
        data:
          entity_id: remote.elena_remote_broadlink
          device: led_strip
          command: power

  learn_led_strip_toggle:
    sequence:
      - service: remote.learn_command
        data:
          entity_id: remote.elena_remote_broadlink
          device: led_strip
          command: power

  elena_turn_off_tv_light_ac:
    sequence:
      - alias: "Turn off TV"
        service: media_player.turn_off
        target:
          entity_id: media_player.elena_tv
      - alias: "Turn off the light"
        service: light.turn_off
        target:
          entity_id:
            - group.elena_light_yeelight
            - light.elena_tv_wled
      - alias: "Turn off the AC"
        service: climate.turn_off
        target:
          entity_id: climate.elena_ac

  romantic:
    sequence:
      - service: script.led_strip_toggle

scene:
  - name: Movies
    entities:
      light.elena_yeelight_nightlight: "on"
      media_player.tv:
        state: "on"
        source: "КиноПоиск: новинки в FullHD"
  - name: Sport
    entities:
      light.elena_yeelight_nightlight: "on"
      media_player.tv:
        state: "on"
        source: "Eurosport Player"

automation:
  # Air Conditioner control
  # - id: Elena Air Conditioner control
  #   alias: elena_ac_control
  #   initial_state: true
  #   trigger:
  #     - platform: state
  #       entity_id: group.elena_doors
  #       to: "on"
  #       for:
  #         seconds: "{{ states('number.elena_ac_door_open_duration') | int(60) }}"
  #       id: door_opened
  #     - platform: state
  #       entity_id: group.elena_doors
  #       to: "off"
  #       id: doors_closed
  #     - platform: homeassistant
  #       event: start
  #       id: started
  #     - platform: event
  #       event_type: automation_reloaded
  #       id: started
  #     - platform: numeric_state
  #       entity_id: sensor.elena_room_temperature
  #       above: number.elena_room_hot_threshold
  #       for: "00:01:00"
  #       id: hot
  #     - platform: numeric_state
  #       entity_id: sensor.elena_room_temperature
  #       below: number.elena_room_cold_threshold
  #       for: "00:01:00"
  #       id: cold
  #     - platform: numeric_state
  #       entity_id: sensor.elena_room_humidity
  #       above: number.elena_room_humid_threshold
  #       for: "00:01:00"
  #       id: humid
  #     - platform: template
  #       value_template: >
  #         {% set temperature = states("sensor.elena_room_temperature") | float(23.0) %}
  #         {% set humidity = states("sensor.elena_room_humidity") | float(50.0) %}
  #         {% set min_temp = states("number.elena_room_cold_threshold") | float(23.0) %}
  #         {% set max_temp = states("number.elena_room_hot_threshold") | float(26.0) %}
  #         {% set max_humidity = states("number.elena_room_humid_threshold") | float(60.0) %}
  #         {{ temperature > min_temp and temperature < max_temp and humidity < max_humidity }}
  #       id: comfort
  #   condition:
  #     - alias: "climate control is on"
  #       condition: state
  #       entity_id: binary_sensor.climate_control
  #       state: "on"
  #     - alias: "not night"
  #       condition: state
  #       entity_id: binary_sensor.night
  #       state: "off"
  #   variables:
  #     has_in_temp: >
  #       {{ states("sensor.elena_room_temperature") not in
  #         ['unknown', 'unavailable'] }}
  #     has_in_humidity: >
  #       {{ states("sensor.elena_room_humidity") not in
  #         ['unknown', 'unavailable'] }}
  #     in_temp: >
  #       {%- if has_in_temp -%}
  #         {{ states("sensor.elena_room_temperature") | float }}
  #       {%- else -%}
  #         25.0
  #       {%- endif -%}
  #     in_humidity: >
  #       {%- if has_in_humidity -%}
  #         {{ states("sensor.elena_room_humidity") | float }}
  #       {%- else -%}
  #         50.0
  #       {%- endif -%}
  #     is_cold: >
  #       {{ has_in_temp and in_temp < (states("number.elena_room_cold_threshold") | float(23.0)) }}
  #     is_hot: >
  #       {{ has_in_temp and in_temp > (states("number.elena_room_hot_threshold") | float(26.0)) }}
  #     is_humid: >
  #       {{ has_in_humidity and in_humidity > (states("number.elena_room_humid_threshold") | float(60.0)) }}
  #     is_warm: "{{ not is_cold and not is_hot }}"
  #     is_comfort: "{{ not is_cold and not is_hot and not is_humid }}"
  #     has_out_temp: >
  #       {{ states("sensor.street_thermometer_temperature") not in
  #         ['unknown', 'unavailable'] }}
  #     out_temp: >
  #       {%- if has_out_temp -%}
  #         {{ states("sensor.street_thermometer_temperature") | float }}
  #       {%- else -%}
  #         25.0
  #       {%- endif -%}
  #     doors_state: >
  #       {{ states("group.elena_doors") }}
  #     ac_state: >
  #       {{ states("climate.elena_ac") }}
  #     need_off: >
  #       {{ (doors_state == 'on' or is_comfort ) and ac_state != 'off' }}
  #     can_heat: >
  #       {{ has_out_temp and doors_state == 'off' and
  #         out_temp < 18 and ac_state == 'off' }}
  #     can_cool: >
  #       {{ has_out_temp and doors_state == 'off' and
  #         out_temp > 10 and ac_state == 'off' }}
  #     can_dry: >
  #       {{ has_in_humidity and is_humid and
  #         doors_state == 'off' and ac_state == 'off' }}
  #   action:
  #     choose:
  #       - alias: elena_ac_turn_off
  #         conditions:
  #           - condition: trigger
  #             id:
  #               - started
  #               - door_opened
  #               - comfort
  #           - "{{ need_off }}"
  #         sequence:
  #           - alias: "log event"
  #             service: logbook.log
  #             data_template:
  #               name: "turning Elena AC OFF"
  #               message: >
  #                 Turning AC off on: trigger: {{ trigger.id }}
  #                   ac_state: {{ ac_state }},
  #                   need_off: {{ need_off }},
  #                   can_heat: {{ can_heat }},
  #                   can_cool: {{ can_cool }},
  #                   can_dry: {{ can_dry }},
  #                   doors_state: {{ doors_state }},
  #                   is_comfort: {{ is_comfort }},
  #                   is_cold: {{ is_cold }},
  #                   is_hot: {{ is_hot }},
  #                   is_warm: {{ is_warm }},
  #                   is_humid: {{ is_humid }},
  #                   in_temp: {{ in_temp }},
  #                   out_temp: {{ out_temp }}
  #               entity_id: climate.elena_ac
  #               domain: climate
  #           - alias: "turn AC off"
  #             service: climate.turn_off
  #             target:
  #               entity_id: climate.elena_ac
  #       - alias: elena_ac_heat
  #         conditions:
  #           # turn on heating on homeassistant start or automation reloaded if cold
  #           - condition: trigger
  #             id:
  #               - started
  #               - doors_closed
  #               - cold
  #           - "{{ is_cold and can_heat }}"
  #         sequence:
  #           - alias: "log event"
  #             service: logbook.log
  #             data_template:
  #               name: "Turn AC on (heat)"
  #               message: >
  #                 Turning AC ON (heat) on: trigger: {{ trigger.id }},
  #                   ac_state: {{ ac_state }},
  #                   need_off: {{ need_off }},
  #                   can_heat: {{ can_heat }},
  #                   can_cool: {{ can_cool }},
  #                   can_dry: {{ can_dry }},
  #                   doors_state: {{ doors_state }},
  #                   is_comfort: {{ is_comfort }},
  #                   is_cold: {{ is_cold }},
  #                   is_hot: {{ is_hot }},
  #                   is_warm: {{ is_warm }},
  #                   is_humid: {{ is_humid }},
  #                   in_temp: {{ in_temp }},
  #                   out_temp: {{ out_temp }}
  #               entity_id: climate.elena_ac
  #               domain: climate
  #           - alias: "Turn AC on (heat)"
  #             service: climate.set_temperature
  #             data:
  #               entity_id: climate.elena_ac
  #               temperature: 30
  #               hvac_mode: "heat"
  #       - alias: elena_ac_cool
  #         conditions:
  #           # turn on cooling on homeassistant start or automation reloaded if cold
  #           - condition: trigger
  #             id:
  #               - started
  #               - doors_closed
  #               - hot
  #           - "{{ is_hot and can_cool }}"
  #         sequence:
  #           - alias: "log event"
  #             service: logbook.log
  #             data_template:
  #               name: "Turn AC on (cool)"
  #               message: >
  #                 Turning AC ON (cool) on: trigger: {{ trigger.id }},
  #                   ac_state: {{ ac_state }},
  #                   need_off: {{ need_off }},
  #                   can_heat: {{ can_heat }},
  #                   can_cool: {{ can_cool }},
  #                   can_dry: {{ can_dry }},
  #                   doors_state: {{ doors_state }},
  #                   is_comfort: {{ is_comfort }},
  #                   is_cold: {{ is_cold }},
  #                   is_hot: {{ is_hot }},
  #                   is_warm: {{ is_warm }},
  #                   is_humid: {{ is_humid }},
  #                   in_temp: {{ in_temp }},
  #                   out_temp: {{ out_temp }}
  #               entity_id: climate.elena_ac
  #               domain: climate
  #           - alias: "Turn AC on (cool)"
  #             service: climate.set_temperature
  #             data:
  #               entity_id: climate.elena_ac
  #               temperature: 16
  #               hvac_mode: "cool"
  #       - alias: elena_ac_dry
  #         conditions:
  #           # turn on drying on homeassistant start or automation reloaded if cold
  #           - condition: trigger
  #             id:
  #               - started
  #               - doors_closed
  #               - humid
  #           - "{{ is_humid and can_dry }}"
  #         sequence:
  #           - alias: "log event"
  #             service: logbook.log
  #             data_template:
  #               name: "Turn AC on (dry)"
  #               message: >
  #                 Turning AC ON (dry) on: trigger: {{ trigger.id }},
  #                   ac_state: {{ ac_state }},
  #                   need_off: {{ need_off }},
  #                   can_heat: {{ can_heat }},
  #                   can_cool: {{ can_cool }},
  #                   can_dry: {{ can_dry }},
  #                   doors_state: {{ doors_state }},
  #                   is_comfort: {{ is_comfort }},
  #                   is_cold: {{ is_cold }},
  #                   is_hot: {{ is_hot }},
  #                   is_warm: {{ is_warm }},
  #                   is_humid: {{ is_humid }},
  #                   in_temp: {{ in_temp }},
  #                   out_temp: {{ out_temp }}
  #               entity_id: climate.elena_ac
  #               domain: climate
  #           - alias: "Turn AC on (dry)"
  #             service: climate.set_temperature
  #             data:
  #               entity_id: climate.elena_ac
  #               temperature: 22
  #               hvac_mode: "dry"

  - id: "elena_light_control_button_l"
    alias: "elena_light_control_button_l"
    description: "Control Yeelight 650 by Xiaomi button"
    use_blueprint:
      path: yuri-vashchenko/button_light_control.yaml
      input:
        trigger_entity: sensor.elena_button_elena_action
        mainlight_entity: light.elena_yeelight
        nightlight_entity: light.elena_yeelight_nightlight
        mode_entity: binary_sensor.elena_yeelight_nightlight
        ambilight_entity: light.elena_yeelight_ambilight
        enabling_entity: binary_sensor.light_control
        hold_action:
          service: script.led_strip_toggle

  - id: "elena_light_control_button_y"
    alias: "elena_light_control_button_y"
    description: "Control Yeelight 650 by Xiaomi button"
    use_blueprint:
      path: yuri-vashchenko/button_light_control.yaml
      input:
        trigger_entity: sensor.elena_button_yuri_action
        mainlight_entity: light.elena_yeelight
        nightlight_entity: light.elena_yeelight_nightlight
        mode_entity: binary_sensor.elena_yeelight_nightlight
        ambilight_entity: light.elena_yeelight_ambilight
        enabling_entity: binary_sensor.light_control
        hold_action:
          service: script.led_strip_toggle

  - id: run_turnoff_script_when_all_hosts_leave_home
    alias: Run the turnoff script when all hosts leave home
    trigger:
      - platform: state
        entity_id: binary_sensor.host_occupancy
        from: "on"
        to: "off"
    condition:
      - alias: "control mode"
        condition: state
        entity_id: binary_sensor.main_control
        state: "on"
    action:
      - alias: "Run turnoff script"
        service: script.turn_on
        target:
          entity_id: script.elena_turn_off_tv_light_ac

  - id: Включить ambilight при включении света
    alias: Включить ambilight при включении света
    trigger:
      - platform: state
        entity_id: light.elena_yeelight
        to: "on"
      - platform: state
        entity_id: light.elena_yeelight_nightlight
        to: "on"
    condition:
      - alias: "main control"
        condition: state
        entity_id: binary_sensor.main_control
        state: "on"
      - alias: "ambilight is off"
        condition: state
        entity_id: light.elena_yeelight_ambilight
        state: "off"
    action:
      - alias: "action alias (name)"
        service: light.turn_on
        target:
          entity_id: light.elena_yeelight_ambilight

  - id: Включить свет когда кто-то зашёл и вечер и темно
    alias: Включить свет когда кто-то зашёл и вечер и темно
    trigger:
      - platform: state
        entity_id: sensor.users_in_elena_room
        from: "0"
        to: "1"
    condition:
      - alias: "control mode"
        condition: state
        entity_id: binary_sensor.main_control
        state: "on"
      - alias: "It is evening"
        condition: state
        entity_id: binary_sensor.evening
        state: "on"
      - alias: "it is dark"
        condition: numeric_state
        entity_id: sensor.elena_motion_illuminance_illuminance_lux
        below: 25
      - alias: "main light is off"
        condition: state
        entity_id: light.elena_yeelight
        state: "off"
      - alias: "nightlight is off"
        condition: state
        entity_id: light.elena_yeelight_nightlight
        state: "off"
      - alias: "motion is detected"
        condition: state
        entity_id: binary_sensor.elena_motion
        state: "on"
    action:
      - alias: "Turn on the light"
        service: light.turn_on
        target:
          entity_id: light.elena_yeelight_nightlight
