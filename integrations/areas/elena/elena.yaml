# Ленина комната

homeassistant:
  customize:
    # Климат
    sensor.mi_t_e72e001268f1:
      friendly_name: Юра температура
    sensor.mi_h_e72e001268f1:
      friendly_name: Юра влажность

    # Розетка кондиционера
    switch.plug_ac_power_outage_memory:
      friendly_name: Розетка кондиционера память отключения

    # Розетка кондиционера
    switch.plug_tv_lena_power_outage_memory:
      friendly_name: Розетка телевизора 65 память отключения

      # Телевизор
    media_player.tv:
      friendly_name: TV
      device_class: tv

  customize_glob:
    # Кнопки
    "*158d0003d13dca*":
      friendly_name: Лена кнопка
    "*button_elena*":
      friendly_name: Лена кнопка

    "*158d00035846ec*":
      friendly_name: Юра кнопка
    "*button_yuri*":
      friendly_name: Юра кнопка

    # Розетка кондиционера
    "*158d00032d3a92*":
      friendly_name: Розетка кондиционера
    "*plug_ac*":
      friendly_name: Розетка кондиционера

    # Розетка телевизора
    "*158d0003c77e0c*":
      friendly_name: Розетка телевизора 65
    "*plug_tv_elena*":
      friendly_name: Розетка телевизора 65

    # Датчики
    "*158d000460dde9*":
      friendly_name: Дверь на балкон
    "*door_balcony*":
      friendly_name: Дверь на балкон  
      device_class: door

    "*158d000483f52f*":
      friendly_name: Лена дверь
    "*door_elena*":
      friendly_name: Лена дверь
      device_class: door

    "*158d000464d3fc*":
      friendly_name: Лена движение
    "*motion_elena*":
      friendly_name: Лена движение

binary_sensor:
  - platform: template
    sensors:
      ac_power:
        friendly_name: "AC power"
        value_template: >
          {%- if states('sensor.plug_ac_power') not in ['unknown', 'unavailable'] -%}
            {{ states('sensor.plug_ac_power') | float > 80.0 }}
          {%- else -%}
            false
          {%- endif -%}

climate:
  - platform: smartir
    name: main_room_ac
    unique_id: main_room_ac
    device_code: 1401
    controller_data: remote.remote_broadlink_elena
    temperature_sensor: sensor.elena_0xe72e001268f1_temperature
    humidity_sensor: sensor.elena_0xe72e001268f1_humidity
    power_sensor: binary_sensor.ac_power

script:
  led_strip_toggle:
    alias: led_strip_toggle
    sequence:
      - service: remote.send_command
        data:
          entity_id: remote.remote_broadlink_elena
          device: led_strip
          command: power

  learn_led_strip_toggle:
    sequence:
      - service: remote.learn_command
        data:
          entity_id: remote.remote_broadlink_elena
          device: led_strip
          command: power

  romantic:
    sequence:
      - service: script.led_strip_toggle

scene:
  - name: Movies
    entities:
      light.elena_yeelight_650_nightlight: "on"
      media_player.tv:
        state: "on"
        source: "КиноПоиск: новинки в FullHD"
  - name: Sport
    entities:
      light.elena_yeelight_650_nightlight: "on"
      media_player.tv:
        state: "on"
        source: "Eurosport Player"

automation:
  # Air Conditioner control
  - id: Elena Air Conditioner control
    alias: elena_ac_control
    initial_state: true
    trigger:
      - platform: state
        entity_id: group.doors_elena
        to: 'on'
        for:
          seconds: "{{states('number.elena_ac_door_open_duration') | int}}"
        id: door_opened
      - platform: state
        entity_id: group.doors_elena
        to: 'off'
        id: doors_closed
      - platform: homeassistant
        event: start
        id: started
      - platform: event
        event_type: automation_reloaded
        id: started
      - platform: numeric_state
        entity_id: sensor.e72e001268f1_temperature
        above: number.elena_ac_hot_threshold
        for: "00:01:00"
        id: hot
      - platform: numeric_state
        entity_id: sensor.e72e001268f1_temperature
        below: number.elena_ac_cold_threshold
        for: "00:01:00"
        id: cold
      - platform: numeric_state
        entity_id: sensor.e72e001268f1_temperature
        below: number.elena_ac_hot_threshold
        above: number.elena_ac_cold_threshold
        for: "00:02:00"
        id: warm
    condition:
      - alias: "climate control is on"
        condition: state
        entity_id: binary_sensor.climate_control
        state: "on"
    variables:
      has_in_temp: >
        {{ states("sensor.e72e001268f1_temperature") not in
          ['unknown', 'unavailable'] }}
      in_temp: >
        {%- if has_in_temp -%}
          {{ states("sensor.e72e001268f1_temperature") | float }}
        {%- else -%}
          25.0
        {%- endif -%}
      is_cold: >
        {{ has_in_temp and in_temp < (states("number.elena_ac_cold_threshold") | float) }}
      is_hot: >
        {{ has_in_temp and in_temp > (states("number.elena_ac_hot_threshold") | float) }}
      is_worm: "{{ not is_cold and not is_hot }}"
      has_out_temp: >
        {{ states("sensor.temperature_humidity_street_temperature") not in
          ['unknown', 'unavailable'] }}
      out_temp: >
        {%- if has_out_temp -%}
          {{ states("sensor.temperature_humidity_street_temperature") | float }}
        {%- else -%}
          25.0
        {%- endif -%}
      doors_state: >
        {{ states("group.doors_elena") }}
      ac_state: >
        {{ states("climate.main_room_ac") }}
      need_off: >
        {{ (doors_state == 'on' or is_worm ) and ac_state != 'off' }}
      can_heat: >
        {{ has_out_temp and doors_state == 'off' and
          out_temp < 10 and ac_state == 'off' }}
      can_cool: >
        {{ has_out_temp and doors_state == 'off' and
          out_temp > 10 and ac_state == 'off' }}
    action:
      choose:
        - alias: elena_ac_turn_off
          conditions:
            - condition: trigger
              id:
                - started
                - door_opened
                - warm
            - "{{ need_off }}"
          sequence:
            - alias: "log event"
              service: logbook.log
              data_template:
                name: "turning Elena AC OFF"
                message: >
                  Turning AC off on: trigger: {{ trigger.id }}
                    ac_state: {{ ac_state }},
                    need_off: {{ need_off }},
                    can_heat: {{ can_heat }},
                    can_cool: {{ can_cool }},
                    doors_state: {{ doors_state }},
                    is_cold: {{ is_cold }},
                    is_hot: {{ is_hot }},
                    is_worm: {{ is_worm }},
                    in_temp: {{ in_temp }},
                    out_temp: {{ out_temp }}
                entity_id: climate.main_room_ac
                domain: climate
            - alias: "turn AC off"
              service: climate.turn_off
              target:
                entity_id: climate.main_room_ac
        - alias: elena_ac_heat
          conditions:
            # turn on heating on homeassistant start or automation reloaded if cold
            - condition: trigger
              id:
                - started
                - doors_closed
                - cold
            - "{{ is_cold and can_heat }}"
          sequence:
            - alias: "log event"
              service: logbook.log
              data_template:
                name: "Turn AC on (heat)"
                message: >
                  Turning AC ON (heat) on: trigger: {{ trigger.id }},
                    ac_state: {{ ac_state }},
                    need_off: {{ need_off }},
                    can_heat: {{ can_heat }},
                    can_cool: {{ can_cool }},
                    doors_state: {{ doors_state }},
                    is_cold: {{ is_cold }},
                    is_hot: {{ is_hot }},
                    is_worm: {{ is_worm }},
                    in_temp: {{ in_temp }},
                    out_temp: {{ out_temp }}
                entity_id: climate.main_room_ac
                domain: climate
            - alias: "Turn AC on (heat)"
              service: climate.set_temperature
              data:
                entity_id: climate.main_room_ac
                temperature: 30
                hvac_mode: "heat"
        - alias: elena_ac_cool
          conditions:
            # turn on cooling on homeassistant start or automation reloaded if cold
            - condition: trigger
              id:
                - started
                - doors_closed
                - hot
            - "{{ is_hot and can_cool }}"
          sequence:
            - alias: "log event"
              service: logbook.log
              data_template:
                name: "Turn AC on (cool)"
                message: >
                  Turning AC ON (cool) on: trigger: {{ trigger.id }},
                    ac_state: {{ ac_state }},
                    need_off: {{ need_off }},
                    can_heat: {{ can_heat }},
                    can_cool: {{ can_cool }},
                    doors_state: {{ doors_state }},
                    is_cold: {{ is_cold }},
                    is_hot: {{ is_hot }},
                    is_worm: {{ is_worm }},
                    in_temp: {{ in_temp }},
                    out_temp: {{ out_temp }}
                entity_id: climate.main_room_ac
                domain: climate
            - alias: "Turn AC on (cool)"
              service: climate.set_temperature
              data:
                entity_id: climate.main_room_ac
                temperature: 16
                hvac_mode: "cool"

  - id: "elena_light_control_button_l"
    alias: "elena_light_control_button_l"
    description: "Control Yeelight 650 by Xiaomi button"
    use_blueprint:
      path: yuri-vashchenko/button_light_control.yaml
      input:
        trigger_entity: sensor.button_elena_action
        mainlight_entity: light.yeelight_elena
        nightlight_entity: light.yeelight_elena_nightlight
        mode_entity: binary_sensor.yeelight_elena_nightlight
        ambilight_entity: light.yeelight_elena_ambilight
        enabling_entity: binary_sensor.light_control
        hold_action:
          service: script.led_strip_toggle

  - id: "elena_light_control_button_y"
    alias: "elena_light_control_button_y"
    description: "Control Yeelight 650 by Xiaomi button"
    use_blueprint:
      path: yuri-vashchenko/button_light_control.yaml
      input:
        trigger_entity: sensor.button_yuri_action
        mainlight_entity: light.yeelight_elena
        nightlight_entity: light.yeelight_elena_nightlight
        mode_entity: binary_sensor.yeelight_elena_nightlight
        ambilight_entity: light.yeelight_elena_ambilight
        enabling_entity: binary_sensor.light_control
        hold_action:
          service: script.led_strip_toggle
