esphome:
  name: rgb-led-controller-weather

esp32:
  board: esp-wrover-kit

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: 192.168.0.240
    gateway: 192.168.0.1
    subnet: 255.255.0.0

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "rgb-led-controller-fallback"
    password: !secret rgb_led_controller_weather_ap

captive_portal:

globals:
  - id: temperature_value
    type: float
    restore_value: true
    initial_value: '0.0'

mqtt:
  broker: !secret mqtt_broker
  username: !secret mqtt_username
  password: !secret mqtt_password
  log_topic: esp32/rgb_led_controller_01/log
  on_json_message:
    topic: zigbee2mqtt/street_thermometer
    qos: 0
    then:
      - lambda: |-
          if (x.containsKey("temperature"))
          {
            id(temperature_value) = x["temperature"];
          }

          ESP_LOGD("on_json_message", "Global value is: %0.2f", id(temperature_value));

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret rgb_led_controller_weather_api_encription_key

ota:
  - platform: esphome
    password: !secret rgb_led_controller_weather_ota

light:
  - platform: fastled_clockless
    chipset: WS2812B
    pin: GPIO12
    num_leds: 144
    rgb_order: GRB
    name: "RGB LED Light"
    effects:
      - addressable_lambda:
          name: temperature
          update_interval: 1s
          lambda: |-
            // it.size() - Number of LEDs
            // it[num] - Access the LED at index num.
            // Set the LED at num to the given r, g, b values
            // it[num] = Color(r, g, b);
            // Get the color at index num (Color instance)
            // it[num].get();

            // -40 + 40 -> n + 40 (0..80) -> / 80 * it.size()
            int led_id = (int)(1.0 * (float)(id(temperature_value) + 40) * (float)it.size() / 80.0);

            // clear old values
            if (initial_run)
            {
              it.all().fade_to_black(1);
            }

            for (int i = 0; i < led_id; i++)
            {
              int red = i;
              int green = 0;
              int blue = it.size() - i;
              // 0 .. 72 .. 144
              // if (i < it.size() / 3)
              //   r = 0;
              // else
              //   r = 255 * 2 * i / it.size() / 3;
              // if (i > it.size() * 2 / 3)
              //   b = 0;
              // else
              //   b = 255 * 2 * (it.size() - i) / it.size() / 3;
              red = (int)(255.0 * (float)red / (float)it.size());
              green = (int)(255.0 * (float)green / (float)it.size());
              blue = (int)(255.0 * (float)blue / (float)it.size());
              it[i] = Color(red, green, blue);
            }

            it.range(led_id, it.size()) = Color(0, 0, 0);
            it[it.size() / 2] = Color(128, 128, 128);
            return;
      - addressable_color_wipe:
          name: notification
          colors:
            - red: 0%
              green: 100%
              blue: 0%
              num_leds: 20
            - red: 0%
              green: 0%
              blue: 0%
              num_leds: 5
          add_led_interval: 100ms
          reverse: false
      - addressable_color_wipe:
          name: warning
          colors:
            - red: 100%
              green: 100%
              blue: 0%
              num_leds: 10
            - red: 0%
              green: 0%
              blue: 0%
              num_leds: 3
          add_led_interval: 60ms
          reverse: false
      - addressable_color_wipe:
          name: alarm
          colors:
            - red: 100%
              green: 0%
              blue: 0%
              num_leds: 5
            - red: 0%
              green: 0%
              blue: 0%
              num_leds: 2
          add_led_interval: 30ms
          reverse: false
